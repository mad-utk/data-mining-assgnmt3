# -*- coding: utf-8 -*-
"""SEMMA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wIFKqdjzf1PPBGMaMCt_fdbH-PITVO_i

# SEMMA (Sample, Explore, Modify, Model, Assess) Methodology:

**Sample:** Obtain a subset of the large dataset to expedite the preliminary analysis.

**Explore:** Understand the structure, content, quality, and inherent patterns in the data.

**Modify:** Create, select, and transform variables in preparation for modeling.

**Model:** Build descriptive or predictive models.

**Assess:** Evaluate the models' utility and validity.
"""

# mount google drive
from google.colab import drive
drive.mount("/content/gdrive")
file_path = '/content/gdrive/MyDrive/Sem-I/CMPE-255 Data Mining/Assignments3/SEMMA/aircrashesFullData.csv'

"""# 1. Sample"""

# read data
import pandas as pd
air_crashes_data = pd.read_csv(file_path)
# check data
air_crashes_data.head()

"""# 2. Explore

"""

# Check the shape of the dataset
dataset_shape = air_crashes_data.shape
dataset_shape

# Check for missing values in each column
missing_values = air_crashes_data.isnull().sum()
missing_values_percentage = (air_crashes_data.isnull().sum() / len(air_crashes_data)) * 100

missing_data = pd.DataFrame({"Missing Values": missing_values, "Percentage (%)": missing_values_percentage})
missing_data.sort_values(by="Percentage (%)", ascending=False)

# Summary statistics for numerical columns
summary_statistics = air_crashes_data.describe()
summary_statistics

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(15, 6))

# Distribution of air fatalities over the years
plt.subplot(1, 2, 1)
sns.lineplot(data=air_crashes_data, x="Year", y="Sum of Fatalities (air)", estimator="sum")
plt.title("Total Air Fatalities Over the Years")
plt.ylabel("Total Fatalities (Air)")

# Distribution of ground fatalities over the years
plt.subplot(1, 2, 2)
sns.lineplot(data=air_crashes_data, x="Year", y="Sum of Ground", estimator="sum")
plt.title("Total Ground Fatalities Over the Years")
plt.ylabel("Total Fatalities (Ground)")

plt.tight_layout()
plt.show()

"""# 3. Modify

"""

# Impute missing values with mode
air_crashes_data["Operator"].fillna(air_crashes_data["Operator"].mode()[0], inplace=True)
air_crashes_data["Country/Region"].fillna(air_crashes_data["Country/Region"].mode()[0], inplace=True)

# Verify if missing values are handled
missing_values_after = air_crashes_data.isnull().sum()
missing_values_after

# Create new variables
air_crashes_data["Total Fatalities"] = air_crashes_data["Sum of Fatalities (air)"] + air_crashes_data["Sum of Ground"]
air_crashes_data["Survivors"] = air_crashes_data["Sum of Aboard"] - air_crashes_data["Sum of Fatalities (air)"]

# Display the first few rows to verify the new variables
air_crashes_data[["Total Fatalities", "Survivors"]].head()

"""# 4. Model (Using Scikit-learn)

Before building the model, we need to preprocess the data. We'll convert categorical columns to numerical format using one-hot encoding and split the data into training and testing sets.
"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder

# Features and target variable
X = air_crashes_data.drop("Total Fatalities", axis=1)
y = air_crashes_data["Total Fatalities"]

# One-hot encoding for categorical variables
X_encoded = pd.get_dummies(X, drop_first=True)

# Split data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

X_train.shape, X_test.shape

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Initialize and train the linear regression model
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

# Predict on the testing set
y_pred = lr_model.predict(X_test)

# Evaluation metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

mse, r2

"""The evaluation metrics for the linear regression model are:

Mean Squared Error (MSE): ≈ 1072.73
R-squared (R²): ≈ 0.90

An r2 value of 0.90 indicates that approximately 90% of the variability in the "Total Fatalities" can be explained by our model, which is a good initial result.

# 5. Assess

Given the model's R2 value, it seems to capture a significant portion of the variance in the data. However, it's worth noting that linear regression assumes a linear relationship between predictors and the target variable.
"""